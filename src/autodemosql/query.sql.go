// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package autodemosql

import (
	"context"
)

const addMessageHistory = `-- name: AddMessageHistory :one
INSERT INTO project_message_history (project_id, content) 
VALUES (?, ?) 
RETURNING id, created_at
`

type AddMessageHistoryParams struct {
	ProjectID string
	Content   string
}

type AddMessageHistoryRow struct {
	ID        int64
	CreatedAt int64
}

func (q *Queries) AddMessageHistory(ctx context.Context, arg AddMessageHistoryParams) (AddMessageHistoryRow, error) {
	row := q.db.QueryRowContext(ctx, addMessageHistory, arg.ProjectID, arg.Content)
	var i AddMessageHistoryRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const addProjectData = `-- name: AddProjectData :one
INSERT INTO project_data (project_id, data_name, function_name, data) 
VALUES (?, ?, ?, ?)
RETURNING id, created_at
`

type AddProjectDataParams struct {
	ProjectID    string
	DataName     string
	FunctionName string
	Data         string
}

type AddProjectDataRow struct {
	ID        int64
	CreatedAt int64
}

func (q *Queries) AddProjectData(ctx context.Context, arg AddProjectDataParams) (AddProjectDataRow, error) {
	row := q.db.QueryRowContext(ctx, addProjectData,
		arg.ProjectID,
		arg.DataName,
		arg.FunctionName,
		arg.Data,
	)
	var i AddProjectDataRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const createProject = `-- name: CreateProject :exec
INSERT INTO project (id) VALUES (?)
`

func (q *Queries) CreateProject(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, createProject, id)
	return err
}

const getLastMessageForProject = `-- name: GetLastMessageForProject :one
SELECT pmh.id, pmh.content, pmh.created_at
FROM project_message_history AS pmh
WHERE pmh.project_id = ?
ORDER BY pmh.created_at DESC
LIMIT 1
`

type GetLastMessageForProjectRow struct {
	ID        int64
	Content   string
	CreatedAt int64
}

func (q *Queries) GetLastMessageForProject(ctx context.Context, projectID string) (GetLastMessageForProjectRow, error) {
	row := q.db.QueryRowContext(ctx, getLastMessageForProject, projectID)
	var i GetLastMessageForProjectRow
	err := row.Scan(&i.ID, &i.Content, &i.CreatedAt)
	return i, err
}

const getMessageHistoryByID = `-- name: GetMessageHistoryByID :one
SELECT id, project_id, created_at, content FROM project_message_history WHERE id = ?
`

func (q *Queries) GetMessageHistoryByID(ctx context.Context, id int64) (ProjectMessageHistory, error) {
	row := q.db.QueryRowContext(ctx, getMessageHistoryByID, id)
	var i ProjectMessageHistory
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreatedAt,
		&i.Content,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, created_at FROM project WHERE id = ?
`

func (q *Queries) GetProjectByID(ctx context.Context, id string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const getProjectDataByID = `-- name: GetProjectDataByID :one
SELECT id, project_id, created_at, data_name, function_name, data FROM project_data WHERE id = ?
`

func (q *Queries) GetProjectDataByID(ctx context.Context, id int64) (ProjectDatum, error) {
	row := q.db.QueryRowContext(ctx, getProjectDataByID, id)
	var i ProjectDatum
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.CreatedAt,
		&i.DataName,
		&i.FunctionName,
		&i.Data,
	)
	return i, err
}
